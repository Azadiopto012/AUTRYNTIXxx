Develop an auto trading bot simulation that mimics a real-world trading environment focused exclusively on newly launched smart contracts for Solana memecoins. The simulation should start with an initial capital of $1,000 and execute trades automatically every 8 seconds. The system must be designed to achieve an average winning ratio of 60% over a series of trades.

Core Requirements:

Initial Setup:

Initial Capital: Set the starting balance at $1,000.

Asset Focus: Restrict trades to newly launched smart contracts on the Solana blockchain that involve memecoins.

Game Mode: Integrate the simulation into a selectable gametype mode, indicated by the placeholder {gametype}.

Trading Logic:

Automatic Execution: Execute a trade every 8 seconds automatically.

Winning Ratio: Ensure the trading algorithm is tuned such that it produces a winning ratio of approximately 60%. This may involve simulating market conditions, implementing probability-based trade outcomes, or adjusting the algorithm's risk management features.

Risk Management: Implement stop-loss and take-profit mechanisms that contribute to maintaining the desired winning ratio.

Order Types: Include various order types (e.g., market orders, limit orders) to simulate realistic trading conditions.

User Data & Dashboard:

Data Tracking: Record detailed user trade data including:

Timestamp of each trade.

Trade type (buy/sell).

Asset details (smart contract address, token symbol).

Entry and exit prices.

Profit or loss for the trade.

Cumulative account balance.

Dashboard Display: Develop an interactive dashboard that:

Shows real-time updates of ongoing trades.

Provides graphical representations (charts, graphs) of performance metrics.

Allows users to filter and review historical trade data.

Displays key performance indicators (KPIs) like win ratio, total profit/loss, and risk statistics.

Enhanced Features & Functions:

Notification System: Include alerts or notifications for key events (e.g., successful trades, significant gains/losses, system errors).

Backtesting Mode: Implement a backtesting feature where users can simulate past market scenarios to evaluate bot performance.

Customization Options: Allow users to adjust trading parameters such as trade frequency, risk settings, and asset selection criteria.

Security & Logging: Maintain secure logging of all trade data and ensure the simulation environment is robust against data loss.

Performance Metrics: Provide advanced analytics, such as trade duration analysis, win/loss distribution, and return on investment (ROI) calculations.

User Experience Enhancements: Integrate a clean, intuitive user interface with responsive design elements and tooltips for guidance on each feature.

Additional Considerations:

Scalability: Ensure the bot simulation can scale with increased trade volume or additional user requests.

Modularity: Design the system architecture in a modular fashion so that new features or asset classes can be integrated with minimal changes.

Documentation: Provide clear in-app documentation and tooltips explaining each feature and metric to help users understand the simulation mechanics.

Testing & Validation: Include unit tests and simulation logs to verify the accuracy of trade execution, winning ratio maintenance, and data reporting on the dashboard.